/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ProfileImport } from './routes/profile'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as ProfileWishlistImport } from './routes/profile/wishlist'
import { Route as ProfileOrdersImport } from './routes/profile/orders'
import { Route as ProfileAccountImport } from './routes/profile/account'

// Create/Update Routes

const ProfileRoute = ProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProfileWishlistRoute = ProfileWishlistImport.update({
  id: '/wishlist',
  path: '/wishlist',
  getParentRoute: () => ProfileRoute,
} as any)

const ProfileOrdersRoute = ProfileOrdersImport.update({
  id: '/orders',
  path: '/orders',
  getParentRoute: () => ProfileRoute,
} as any)

const ProfileAccountRoute = ProfileAccountImport.update({
  id: '/account',
  path: '/account',
  getParentRoute: () => ProfileRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileImport
      parentRoute: typeof rootRoute
    }
    '/profile/account': {
      id: '/profile/account'
      path: '/account'
      fullPath: '/profile/account'
      preLoaderRoute: typeof ProfileAccountImport
      parentRoute: typeof ProfileImport
    }
    '/profile/orders': {
      id: '/profile/orders'
      path: '/orders'
      fullPath: '/profile/orders'
      preLoaderRoute: typeof ProfileOrdersImport
      parentRoute: typeof ProfileImport
    }
    '/profile/wishlist': {
      id: '/profile/wishlist'
      path: '/wishlist'
      fullPath: '/profile/wishlist'
      preLoaderRoute: typeof ProfileWishlistImport
      parentRoute: typeof ProfileImport
    }
  }
}

// Create and export the route tree

interface ProfileRouteChildren {
  ProfileAccountRoute: typeof ProfileAccountRoute
  ProfileOrdersRoute: typeof ProfileOrdersRoute
  ProfileWishlistRoute: typeof ProfileWishlistRoute
}

const ProfileRouteChildren: ProfileRouteChildren = {
  ProfileAccountRoute: ProfileAccountRoute,
  ProfileOrdersRoute: ProfileOrdersRoute,
  ProfileWishlistRoute: ProfileWishlistRoute,
}

const ProfileRouteWithChildren =
  ProfileRoute._addFileChildren(ProfileRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/profile': typeof ProfileRouteWithChildren
  '/profile/account': typeof ProfileAccountRoute
  '/profile/orders': typeof ProfileOrdersRoute
  '/profile/wishlist': typeof ProfileWishlistRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/profile': typeof ProfileRouteWithChildren
  '/profile/account': typeof ProfileAccountRoute
  '/profile/orders': typeof ProfileOrdersRoute
  '/profile/wishlist': typeof ProfileWishlistRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/profile': typeof ProfileRouteWithChildren
  '/profile/account': typeof ProfileAccountRoute
  '/profile/orders': typeof ProfileOrdersRoute
  '/profile/wishlist': typeof ProfileWishlistRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/profile'
    | '/profile/account'
    | '/profile/orders'
    | '/profile/wishlist'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/profile'
    | '/profile/account'
    | '/profile/orders'
    | '/profile/wishlist'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/profile'
    | '/profile/account'
    | '/profile/orders'
    | '/profile/wishlist'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  ProfileRoute: typeof ProfileRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  ProfileRoute: ProfileRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/profile"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/profile": {
      "filePath": "profile.tsx",
      "children": [
        "/profile/account",
        "/profile/orders",
        "/profile/wishlist"
      ]
    },
    "/profile/account": {
      "filePath": "profile/account.tsx",
      "parent": "/profile"
    },
    "/profile/orders": {
      "filePath": "profile/orders.tsx",
      "parent": "/profile"
    },
    "/profile/wishlist": {
      "filePath": "profile/wishlist.tsx",
      "parent": "/profile"
    }
  }
}
ROUTE_MANIFEST_END */
